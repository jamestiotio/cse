
// Test main for TODO#3
int main(int argc, char* argv[]){

    //Check and parse command line options to be in the right format
    if (argc < 2) {
        printf("Usage: sum <infile> <numprocs>\n");
        exit(EXIT_FAILURE);
    }

    //Limit number_of_processes into 10. 
    //If there's no third argument, set the default number_of_processes into 1.  
    if (argc < 3){
        number_of_processes = 1;
    }
    else{
        if (atoi(argv[2]) < MAX_PROCESS) number_of_processes = atoi(argv[2]);
        else number_of_processes = MAX_PROCESS;
    }

    printf("Number of processes: %d\n", number_of_processes);
    printf("Main process pid %d \n", getpid());

    setup();
    createchildren();

    //enter exactly N jobs to the buffer
    for (int i = 0; i<number_of_processes; i++){
        shmPTR_jobs_buffer[i].task_type = 't';
        shmPTR_jobs_buffer[i].task_duration = 1;
        shmPTR_jobs_buffer[i].task_status = 1; //new, undone job
        sem_post(sem_jobs_buffer[i]); // signal the child
    }


    //sleep for 3 seconds, the children processes should all finish by now
    sleep(3);

    //enter exactly N termination jobs to the buffer
    for (int i = 0; i<number_of_processes; i++){
        shmPTR_jobs_buffer[i].task_type = 'z';//termination job
        shmPTR_jobs_buffer[i].task_duration = 1;
        shmPTR_jobs_buffer[i].task_status = 1; 
        sem_post(sem_jobs_buffer[i]); // signal the child
    }

    //wait for all N children processes
    int waitpid_result;
    for (int i = 0; i<number_of_processes; i++){
        waitpid_result = waitpid(children_processes[i], NULL, 0); // returns when child exits normally
        if (waitpid_result != -1){
            printf("Child %d with pid %d has exited successfully\n", i, waitpid_result);
        }
    }

        // print final results
    printf("Final results: sum -- %ld, odd -- %ld, min -- %ld, max -- %ld, total task -- %ld\n", ShmPTR_global_data->sum_work, ShmPTR_global_data->odd, ShmPTR_global_data->min, ShmPTR_global_data->max, ShmPTR_global_data->total_tasks);

    //detach and remove shared memory locations
    int detach_status = shmdt((void *) ShmPTR_global_data); //detach
    if (detach_status == -1) printf("Detach shared memory global_data ERROR\n");
    int remove_status = shmctl(ShmID_global_data, IPC_RMID, NULL); //delete
    if (remove_status == -1) printf("Remove shared memory global_data ERROR\n");
    detach_status = shmdt((void *) shmPTR_jobs_buffer); //detach
    if (detach_status == -1) printf("Detach shared memory jobs ERROR\n");
    remove_status = shmctl(ShmID_jobs, IPC_RMID, NULL); //delete
    if (remove_status == -1) printf("Remove shared memory jobs ERROR\n");


    //unlink all semaphores before exiting process
    int sem_close_status = sem_unlink("semglobaldata");
    if (sem_close_status == 0){
        printf("Semaphore globaldata closes succesfully.\n");
    }
    else{
        printf("Semaphore globaldata fails to close.\n");
    }

    for (int i = 0; i<number_of_processes; i++){
        char *sem_name = malloc(sizeof(char)*16);
        sprintf(sem_name, "semjobs%d", i);
        sem_close_status = sem_unlink(sem_name);
        if (sem_close_status == 0){
             printf("Semaphore jobs %d closes succesfully.\n", i);
        }
        else{
            printf("Semaphore jobs %d fails to close.\n", i);
        }
        free(sem_name);
    }


    printf("success\n");
    
    return 0;
}